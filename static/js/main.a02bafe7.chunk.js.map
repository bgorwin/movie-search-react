{"version":3,"sources":["movieCard.js","searchMovies.js","App.js","reportWebVitals.js","index.js"],"names":["MovieCard","movie","className","src","poster_path","alt","title","release_date","vote_average","overview","SearchMovies","useState","query","setQuery","movies","setMovies","searchMovies","e","a","preventDefault","url","process","fetch","res","json","data","results","console","log","onSubmit","htmlFor","name","placeholder","value","onChange","target","type","filter","map","id","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qPAEe,SAASA,EAAT,GAA+B,IAAVC,EAAS,EAATA,MACnC,OACC,sBAAKC,UAAU,OAAf,UACC,qBACCA,UAAU,cACVC,IAAG,0DAAqDF,EAAMG,aAC9DC,IAAKJ,EAAMK,MAAQ,YAEpB,sBAAKJ,UAAU,gBAAf,UACC,oBAAIA,UAAU,cAAd,SAA6BD,EAAMK,QACnC,4BACC,mDAAsBL,EAAMM,kBAE7B,4BACC,6CAAgBN,EAAMO,kBAEvB,mBAAGN,UAAU,aAAb,SAA2BD,EAAMQ,iBCftB,SAASC,IAAe,MAEZC,mBAAS,IAFG,mBAE/BC,EAF+B,KAExBC,EAFwB,OAKVF,mBAAS,IALC,mBAK/BG,EAL+B,KAKvBC,EALuB,KAOhCC,EAAY,uCAAG,WAAOC,GAAP,mBAAAC,EAAA,6DACpBD,EAAEE,iBAEIC,EAHc,4DAG6CC,mCAH7C,iCAGsGT,EAHtG,iDAMDU,MAAMF,GANL,cAMbG,EANa,gBAOAA,EAAIC,OAPJ,OAObC,EAPa,OAQnBV,EAAUU,EAAKC,SARI,kDAUnBC,QAAQC,IAAR,MAVmB,0DAAH,sDAclB,OACC,qCACC,uBAAM1B,UAAU,OAAO2B,SAAUb,EAAjC,UACC,uBAAOc,QAAQ,QAAQ5B,UAAU,QAAjC,wBAGA,uBACCA,UAAU,QACV6B,KAAK,QACLC,YAAY,kBACZC,MAAOrB,EACPsB,SAAU,SAACjB,GAAD,OAAOJ,EAASI,EAAEkB,OAAOF,UAEpC,wBAAQ/B,UAAU,SAASkC,KAAK,SAAhC,uBAID,qBAAKlC,UAAU,YAAf,SACEY,EACCuB,QAAO,SAACpC,GAAD,OAAWA,EAAMG,eACxBkC,KAAI,SAACrC,GAAD,OACJ,cAACD,EAAD,CAAWC,MAAOA,GAAYA,EAAMsC,Y,MC/B3BC,MAVf,WACC,OACC,sBAAKtC,UAAU,YAAf,UACC,oBAAIA,UAAU,QAAd,gCACA,cAACQ,EAAD,IACA,wDCGY+B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.a02bafe7.chunk.js","sourcesContent":["import React from 'react';\n\nexport default function MovieCard({ movie }) {\n\treturn (\n\t\t<div className='card'>\n\t\t\t<img\n\t\t\t\tclassName='card--image'\n\t\t\t\tsrc={`https://image.tmdb.org/t/p/w185_and_h278_bestv2/${movie.poster_path}`}\n\t\t\t\talt={movie.title + ' poster'}\n\t\t\t/>\n\t\t\t<div className='card--content'>\n\t\t\t\t<h3 className='card--title'>{movie.title}</h3>\n\t\t\t\t<p>\n\t\t\t\t\t<small>RELEASE DATE: {movie.release_date}</small>\n\t\t\t\t</p>\n\t\t\t\t<p>\n\t\t\t\t\t<small>RATING: {movie.vote_average}</small>\n\t\t\t\t</p>\n\t\t\t\t<p className='card--desc'>{movie.overview}</p>\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n","import React, { useState } from 'react';\nimport MovieCard from './movieCard';\n\nexport default function SearchMovies() {\n\t// states - input query, movies\n\tconst [query, setQuery] = useState('');\n\n\t//create the state for movies, and update that state appropriate\n\tconst [movies, setMovies] = useState([]);\n\n\tconst searchMovies = async (e) => {\n\t\te.preventDefault();\n\n\t\tconst url = `https://api.themoviedb.org/3/search/movie?api_key=${process.env.REACT_APP_SECRET_KEY}&language=en-US&query=${query}&page=1&include_adult=false`;\n\n\t\ttry {\n\t\t\tconst res = await fetch(url);\n\t\t\tconst data = await res.json();\n\t\t\tsetMovies(data.results);\n\t\t} catch (err) {\n\t\t\tconsole.log(err);\n\t\t}\n\t};\n\n\treturn (\n\t\t<>\n\t\t\t<form className='form' onSubmit={searchMovies}>\n\t\t\t\t<label htmlFor='query' className='label'>\n\t\t\t\t\tMovie Name\n\t\t\t\t</label>\n\t\t\t\t<input\n\t\t\t\t\tclassName='input'\n\t\t\t\t\tname='query'\n\t\t\t\t\tplaceholder='i.e. Broad City'\n\t\t\t\t\tvalue={query}\n\t\t\t\t\tonChange={(e) => setQuery(e.target.value)}\n\t\t\t\t></input>\n\t\t\t\t<button className='button' type='submit'>\n\t\t\t\t\tSearch\n\t\t\t\t</button>\n\t\t\t</form>\n\t\t\t<div className='card-list'>\n\t\t\t\t{movies\n\t\t\t\t\t.filter((movie) => movie.poster_path)\n\t\t\t\t\t.map((movie) => (\n\t\t\t\t\t\t<MovieCard movie={movie} key={movie.id} />\n\t\t\t\t\t))}\n\t\t\t</div>\n\t\t</>\n\t);\n}\n","import React from 'react';\nimport SearchMovies from './searchMovies';\nimport './App.css';\n\nfunction App() {\n\treturn (\n\t\t<div className='container'>\n\t\t\t<h1 className='title'>React Movie Search</h1>\n\t\t\t<SearchMovies />\n\t\t\t<h3>Search for a movie</h3>\n\t\t</div>\n\t);\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}